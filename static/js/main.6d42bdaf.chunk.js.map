{"version":3,"sources":["rikaskill.js","App.jsx","reportWebVitals.js","index.js"],"names":["showToMeInPic","json","givingPlantUmlSetting","getFormattedToUml","showToMeOnSite","getVisualizedToSite","getFormatted","object","prefix","result","Object","entries","forEach","index","key","value","length","isNode","howManyStars","string","match","split","coloringTheBox","join","map","el","includes","lightness","lightingWithDepth","replace","shadeOfColor","rgbToHex","color","Math","round","toString","light","red","parseInt","substr","green","blue","colorHexForm","gettingLeaf","creatingNodeFromLeaf","test","repeat","num","whiteStar","ranking","console","log","hasStar","unBoxing","createUrl","umlVersion","plantumlEncoder","encode","App","props","useState","skills","jsonToUml","setJsonToUml","showTheJson","setShowTheJson","setUmlVersion","imgUrl","setImgUrl","className","alt","src","onSubmit","e","event","preventDefault","JSON","parse","target","type","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d42bdaf.chunk.js","sourcesContent":["export function showToMeInPic(json) {\r\n    return givingPlantUmlSetting(getFormattedToUml(json, \"\"));\r\n}\r\nexport function showToMeOnSite(json) {\r\n    return getVisualizedToSite(json, \"\");\r\n}\r\n\r\nvar baseColor = \"#00abf5\";\r\n\r\nconst getFormatted = (object, prefix) => {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"* \" : \"* \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getFormatted(\r\n                value,\r\n                prefix + (index + 1 === length ? \"*\" : \"*\")\r\n            );\r\n        } else {\r\n            if (value || value === 0) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result\r\n};\r\n\r\nconst getVisualizedToSite = (object, prefix) => {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"└─ \" : \"├─ \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getVisualizedToSite(\r\n                value,\r\n                prefix + (index + 1 === length ? \"   \" : \"│  \")\r\n            );\r\n        } else {\r\n            if (value || value === 0) result += \" ─ \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nconst isLeaf = (value) => {\r\n    return typeof value === \"string\";\r\n};\r\nconst isNode = (value) => {\r\n    return typeof value === \"object\";\r\n};\r\nconst hasNumber = (string) => {\r\n    return /\\d/.test(string);\r\n};\r\nconst hasStar = (string) => {\r\n    return /☆/.test(string) || /★/.test(string)\r\n}\r\nconst howManyStars = (string) => {\r\n    return string.match(/[*]/g).length;\r\n};\r\nconst unBoxing = (string) => {\r\n    return string\r\n        .split(\"\\n\")\r\n        .map((el) => (hasStar(el) && isLeaf(el) ? el.replace(\"* \", \"*_ \") : el))\r\n        .join(\"\\n\");\r\n};\r\nconst givingPlantUmlSetting = (string) => {\r\n    string = string.split(\"\\n\");\r\n    string = coloringTheBox(string);\r\n    string[0] =\r\n        \"@startmindmap\\n!theme spacelab\\ntitle Rika's Skill-visualizer\\n\\n\" +\r\n        string[0];\r\n    string[string.length - 1] = \"\\nlegend right\\n  Rika©\\nendlegend\\n@endmindmap\";\r\n    return string.join(\"\\n\");\r\n};\r\n\r\nconst coloringTheBox = (string) => {\r\n    return string.map((el) => {\r\n        if (!el.includes(\"_\") && el.length > 0) {\r\n            var lightness = lightingWithDepth(el);\r\n            return el.replace(\"* \", `*[${shadeOfColor(baseColor, lightness)}] `);\r\n        } else {\r\n            return el;\r\n        }\r\n    });\r\n};\r\nconst rgbToHex = (color) => {\r\n    color = Math.round(color);\r\n    if (color < 0) color = 0;\r\n    if (color > 255) color = 255;\r\n    var string = color.toString(16);\r\n    if (string.length < 2) string = \"0\" + string;\r\n    return string;\r\n};\r\nconst colorHexForm = (red, green, blue) => {\r\n    return \"#\" + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue);\r\n};\r\nconst lightingWithDepth = (string) => {\r\n    return howManyStars(string) / 10;\r\n};\r\nconst shadeOfColor = (color, light) => {\r\n    var red = parseInt(color.substr(1, 2), 16);\r\n    var green = parseInt(color.substr(3, 2), 16);\r\n    var blue = parseInt(color.substr(5, 2), 16);\r\n    if (light < 0) {\r\n        red = (1 + light) * red;\r\n        green = (1 + light) * green;\r\n        blue = (1 + light) * blue;\r\n    } else {\r\n        red = (1 - light) * red + light * 255;\r\n        green = (1 - light) * green + light * 255;\r\n        blue = (1 - light) * blue + light * 255;\r\n    }\r\n    return colorHexForm(red, green, blue);\r\n};\r\n\r\nconst ranking = (num) => {\r\n    if (num > 8) num = 8\r\n    if (num < 0) num = 0\r\n    var whiteStar = 8 - num;\r\n    var blackStar = num;\r\n    var result = \"★\".repeat(blackStar) + \"☆\".repeat(whiteStar)\r\n    return result\r\n}\r\nconst gettingLeaf = (string) => {\r\n    return string.split(\"\\n\").map((el) => creatingNodeFromLeaf(el)).join(\"\\n\");\r\n}\r\nconst creatingNodeFromLeaf = (value) => {\r\n    return value.split(\"\\n\").map((el) => {\r\n        if (hasNumber(el)) {\r\n            el = el.split(\": \");\r\n            el[1] = \"*\".repeat(howManyStars(el[0])) + \"* \" + ranking(el[1]);\r\n            return el.join(\"\\n\");\r\n        } else {\r\n            return el;\r\n        }\r\n    });\r\n};\r\n\r\nconst getFormattedToUml = (string) => {\r\n    string = getFormatted(string, \"\")\r\n    console.log(gettingLeaf(string))\r\n    return unBoxing(gettingLeaf(string));\r\n}\r\n  //☆ ★","import React, { useState } from 'react';\r\n//import { Collapse } from 'react-collapse'; //todo\r\nimport plantumlEncoder from 'plantuml-encoder';\r\nimport './App.css';\r\nimport {\r\n  showToMeOnSite\r\n} from './rikaskill.js'\r\nimport {\r\n  showToMeInPic\r\n} from './rikaskill.js'\r\nimport skills from './asd.json'\r\n\r\nconst createUrl = (umlVersion) => {\r\n  var encoded = plantumlEncoder.encode(umlVersion)\r\n  var imgUrl = 'http://www.plantuml.com/plantuml/img/' + encoded\r\n  return imgUrl\r\n}\r\n\r\nconst App = (props) => {\r\n\r\n  const [jsonToUml, setJsonToUml] = useState(skills)\r\n  const [showTheJson, setShowTheJson] = useState(showToMeOnSite(skills))\r\n  const [umlVersion, setUmlVersion] = useState(showToMeInPic(skills))\r\n  const [imgUrl, setImgUrl] = useState(createUrl(showToMeInPic(skills)))\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault()\r\n    const value = JSON.parse(event.target[0].value)\r\n    const showTheJson = showToMeOnSite(value)\r\n    const umlVersion = showToMeInPic(value)\r\n\r\n    setJsonToUml(value)\r\n    setShowTheJson(showTheJson)\r\n    setUmlVersion(umlVersion)\r\n    setImgUrl(createUrl(umlVersion))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <br />\r\n      <div><img alt=\"\" src={imgUrl}></img></div><br />\r\n      <div><p>Do you want to try? Copy-paste here your JSON =)</p><form onSubmit={e => onSubmit(e)}><input type=\"text\"></input><button type=\"submit\">Submit</button></form></div><br />\r\n      <div><br /><p>Your JSON </p><br />\r\n        <pre>{JSON.stringify(jsonToUml)}</pre>\r\n        <br /><p>Your JSON-Tree</p><br />\r\n        <pre>{`${showTheJson}`}</pre>\r\n        <br /><p>Your JSON in plantUML</p><br />\r\n        <pre>{`${umlVersion}`}</pre></div>\r\n      {/*<Collapse isOpened={true || false}>\r\n        <div></div>\r\n      </Collapse>\r\n      <Collapse isOpened={true || false}>\r\n        <div></div>\r\n      </Collapse>\r\n      <Collapse isOpened={true || false}>\r\n        <div></div>\r\n  </Collapse>*/}\r\n    </div>\r\n  )\r\n}\r\n\r\n/*\r\nconst { Collapse, UnmountClosed } = ReactCollapse;\r\n\r\nconst getText = num => text.slice(0, num).map((p, i) => <p key={i}>{p}</p>);\r\n\r\nclass VariableText extends React.Component {\r\n  static propTypes = {\r\n    isOpened: PropTypes.bool\r\n  };\r\n\r\n  static defaultProps = {\r\n    isOpened: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { isOpened } = this.props;\r\n    this.state = { isOpened, paragraphs: 1 };\r\n  }\r\n\r\n  render() {\r\n    const { isOpened, paragraphs } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"config\">\r\n          <label className=\"label\">\r\n            Opened:\r\n            <input\r\n              className=\"input\"\r\n              type=\"checkbox\"\r\n              checked={isOpened}\r\n              onChange={({ target: { checked } }) => this.setState({ isOpened: checked })} />\r\n          </label>\r\n\r\n          <label className=\"label\">\r\n            Paragraphs:\r\n            <input\r\n              className=\"input\"\r\n              type=\"range\"\r\n              value={paragraphs}\r\n              step={1}\r\n              min={0}\r\n              max={4}\r\n              onChange={({ target: { value } }) => this.setState({ paragraphs: parseInt(value, 10) })} />\r\n            {paragraphs}\r\n          </label>\r\n        </div>\r\n\r\n        <Collapse isOpened={isOpened}>\r\n          <div className=\"text\">\r\n            {paragraphs ? getText(paragraphs) : <p>No text</p>}\r\n          </div>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst App = () => (\r\n  <div className=\"app\">\r\n    <section className=\"section\">\r\n      <h2>Your JSON</h2>\r\n      <VariableText />\r\n    </section>\r\n  </div>\r\n);\r\n\r\nReactDOM.render(<App />, document.querySelector('#app'));*/\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}