{"version":3,"sources":["rikaskill.js","components/MindMap.jsx","components/MindMapDefault.jsx","components/UpdateForm.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getFormatted","object","prefix","result","Object","entries","forEach","index","key","value","length","isNode","getVisualizedToSite","howManyStars","string","match","coloringTheBox","map","el","includes","lightness","lightingWithDepth","replace","shadeOfColor","rgbToHex","color","Math","round","toString","light","red","parseInt","substr","green","blue","colorHexForm","creatingNodeFromLeaf","split","test","repeat","num","whiteStar","ranking","join","getFormattedToUml","hasStar","unBoxing","gettingLeaf","showToMeInPic","json","showToMeOnSite","MindMap","skills","showTheJson","umlVersion","imgUrl","plantumlEncoder","encode","createUrl","alt","src","JSON","stringify","mindMapDefault","UpdateForm","onSubmit","type","App","props","useState","MindMapDefault","mindMaps","setMindMaps","className","event","preventDefault","parse","target","uuidv4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abaf6201.chunk.js","sourcesContent":["const baseColor = \"#00abf5\";\r\n\r\nconst getFormatted = (object, prefix) => {\r\n    let result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"* \" : \"* \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getFormatted(\r\n                value,\r\n                prefix + (index + 1 === length ? \"*\" : \"*\")\r\n            );\r\n        } else {\r\n            if (value || value === 0) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result\r\n};\r\n\r\nconst getVisualizedToSite = (object, prefix) => {\r\n    let result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"└─ \" : \"├─ \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getVisualizedToSite(\r\n                value,\r\n                prefix + (index + 1 === length ? \"   \" : \"│  \")\r\n            );\r\n        } else {\r\n            if (value || value === 0) result += \" ─ \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nconst isLeaf = value => typeof value === \"string\";\r\n\r\nconst isNode = value => typeof value === \"object\";\r\n\r\nconst hasNumber = string => /\\d/.test(string);\r\n\r\nconst hasStar = string => /☆/.test(string) || /★/.test(string)\r\n\r\nconst howManyStars = string => string.match(/[*]/g).length\r\n\r\nconst unBoxing = string => string\r\n    .split(\"\\n\")\r\n    .map((el) => (hasStar(el) && isLeaf(el) ? el.replace(\"* \", \"*_ <color:#b22746>\") : el))\r\n    .join(\"\\n\")\r\n\r\nconst givingPlantUmlSetting = string => {\r\n    string = string.split(\"\\n\");\r\n    string = coloringTheBox(string);\r\n    string[0] =\r\n        \"@startmindmap\\n!theme spacelab\\ntitle Rika's Skill-visualizer\\n\\n\" +\r\n        string[0];\r\n    string[string.length - 1] = \"\\nlegend right\\n  Rika©\\nendlegend\\n@endmindmap\";\r\n    return string.join(\"\\n\");\r\n};\r\n\r\nconst coloringTheBox = string => {\r\n    return string.map((el) => {\r\n        if (!el.includes(\"_\") && el.length > 0) {\r\n            const lightness = lightingWithDepth(el);\r\n            return el.replace(\"* \", `*[${shadeOfColor(baseColor, lightness)}] <color:#464547>`);\r\n        } else {\r\n            return el;\r\n        }\r\n    });\r\n};\r\nconst rgbToHex = color => {\r\n    color = Math.round(color);\r\n    if (color < 0) color = 0;\r\n    if (color > 255) color = 255;\r\n    let string = color.toString(16);\r\n    if (string.length < 2) string = \"0\" + string;\r\n    return string;\r\n};\r\nconst colorHexForm = (red, green, blue) => \"#\" + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue)\r\n\r\nconst lightingWithDepth = string => (howManyStars(string) * 2) / 10;\r\n\r\nconst shadeOfColor = (color, light) => {\r\n    let red = parseInt(color.substr(1, 2), 16);\r\n    let green = parseInt(color.substr(3, 2), 16);\r\n    let blue = parseInt(color.substr(5, 2), 16);\r\n    if (light < 0) {\r\n        red = (1 + light) * red;\r\n        green = (1 + light) * green;\r\n        blue = (1 + light) * blue;\r\n    } else {\r\n        red = (1 - light) * red + light * 255;\r\n        green = (1 - light) * green + light * 255;\r\n        blue = (1 - light) * blue + light * 255;\r\n    }\r\n    return colorHexForm(red, green, blue);\r\n};\r\n\r\nconst ranking = num => {\r\n    if (num > 8) num = 8;\r\n    if (num < 0) num = 0;\r\n    const whiteStar = 8 - num;\r\n    const blackStar = num;\r\n    return \"★\".repeat(blackStar) + \"☆\".repeat(whiteStar);\r\n}\r\nconst gettingLeaf = string => string.split(\"\\n\").map((el) => creatingNodeFromLeaf(el)).join(\"\\n\");\r\n\r\nconst creatingNodeFromLeaf = value => {\r\n    return value.split(\"\\n\").map((el) => {\r\n        if (hasNumber(el)) {\r\n            el = el.split(\": \");\r\n            el[1] = \"*\".repeat(howManyStars(el[0])) + \"* \" + ranking(el[1]);\r\n            return el.join(\"\\n\");\r\n        } else {\r\n            return el;\r\n        }\r\n    });\r\n};\r\n\r\nconst getFormattedToUml = string => unBoxing(gettingLeaf(getFormatted(string, \"\")));\r\n\r\nexport const showToMeInPic = json => givingPlantUmlSetting(getFormattedToUml(json, \"\"))\r\n\r\nexport const showToMeOnSite = json => getVisualizedToSite(json, \"\")\r\n\r\n  //☆ ★","import React from 'react';\r\nimport plantumlEncoder from 'plantuml-encoder';\r\nimport {\r\n    showToMeOnSite, showToMeInPic\r\n} from '../rikaskill.js'\r\n\r\nconst createUrl = umlVersion => `http://www.plantuml.com/plantuml/img/${plantumlEncoder.encode(umlVersion)}`\r\n\r\nexport const MindMap = ({ skills }) => {\r\n    const showTheJson = showToMeOnSite(skills)\r\n    const umlVersion = showToMeInPic(skills)\r\n    const imgUrl = createUrl(showToMeInPic(skills))\r\n\r\n    return (\r\n        <>\r\n            <div><img alt=\"\" src={imgUrl}></img></div><br />\r\n            <div><br /><p>Your JSON </p><br />\r\n                <pre>{JSON.stringify(skills)}</pre>\r\n                <br /><p>Your JSON-Tree</p><br />\r\n                <pre>{`${showTheJson}`}</pre>\r\n                <br /><p>Your JSON in plantUML</p><br />\r\n                <pre>{`${umlVersion}`}</pre></div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import htmlSkills from '../resources/html.json'\r\nimport cssSkills from '../resources/css.json'\r\nimport javascriptSkills from '../resources/javascript.json'\r\nimport skills from '../resources/otherskills.json'\r\n\r\nconst mindMapDefault = [htmlSkills, cssSkills, javascriptSkills, skills]\r\n\r\nexport default mindMapDefault","import React from 'react';\r\n\r\nexport const UpdateForm = ({ onSubmit }) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\"></input>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { MindMap } from './components/MindMap';\r\nimport MindMapDefault from './components/MindMapDefault';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { UpdateForm } from './components/UpdateForm'\r\n\r\nimport './App.css';\r\n\r\nconst App = (props) => {\r\n  const [mindMaps, setMindMaps] = useState(MindMapDefault)\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault()\r\n    const value = JSON.parse(event.target[0].value)\r\n\r\n    setMindMaps([value])\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <UpdateForm onSubmit={onSubmit} />\r\n      {mindMaps.map(skills => (<MindMap skills={skills} key={uuidv4()} />))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}