{"version":3,"sources":["rikaskill.js","App.jsx","reportWebVitals.js","index.js"],"names":["baseColor","plsWork","QQ","string","result","getFormatted","map","el","includes","length","lightness","match","lighting","replace","col","light","green","blue","r","parseInt","substr","g","b","rgbToHex","shade","coloring","split","join","object","prefix","Object","entries","forEach","i","k","v","test","hasNumber","color","Math","round","toString","App","props","createURL","UMLVersion","plantumlEncoder","encode","onSubmit","event","preventDefault","value","JSON","parse","target","setState","jsonToUML","url","skills","state","console","log","this","className","e","type","alt","src","stringify","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f3ad11b.chunk.js","sourcesContent":["var baseColor = \"#00abf5\";\r\n\r\nexport function plsWork(QQ) {\r\n    var result = getFormatted(QQ, \"\");\r\n    return plantUMLing(result);\r\n}\r\n\r\n//creating the data's into the shape of needing to plantUML\r\n\r\nfunction getFormatted(object, prefix) {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([k, v], i, { length }) => {\r\n        result += prefix + (i + 1 === length ? \"* \" : \"* \") + k;\r\n        if (v && typeof v === \"object\") {\r\n            result += \"\\n\";\r\n            result += getFormatted(v, prefix + (i + 1 === length ? \"*\" : \"*\"));\r\n        } else {\r\n            if (v || v === 0) result += \": \" + v;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return unBoxing(result);\r\n}\r\n//does the children got number?\r\nfunction hasNumber(string) {\r\n    return /\\d/.test(string);\r\n}\r\n//last leafs \"unboxing\"\r\nfunction unBoxing(string) {\r\n    return string\r\n        .split(\"\\n\")\r\n        .map((el) => (hasNumber(el) ? el.replace(\"* \", \"*_ \") : el))\r\n        .join(\"\\n\");\r\n}\r\n//adding plantUML settings\r\nfunction plantUMLing(string) {\r\n    string = string.split(\"\\n\");\r\n    string = coloring(string);\r\n    string[0] = \"@startmindmap\\n!theme spacelab\\ntitle Skill-visualizer\\n\\n\" + string[0];\r\n    string[string.length - 1] = \"\\nlegend right\\n  RikaÂ©\\nendlegend\\n@endmindmap\";\r\n    return string.join(\"\\n\");\r\n}\r\n\r\n//adding color to the boxes\r\nfunction coloring(string) {\r\n    return string.map((el) => {\r\n        if (!el.includes(\"_\") && el.length > 0) {\r\n            var lightness = lighting(el)\r\n            return el.replace(\"* \", `*[${shade(baseColor, lightness)}] `)\r\n        } else {\r\n            return el\r\n        }\r\n    });\r\n}\r\n\r\n//converting colors to hexadecimal\r\nfunction rgbToHex(color) {\r\n    color = Math.round(color);\r\n    if (color < 0) color = 0;\r\n    if (color > 255) color = 255;\r\n    var string = color.toString(16);\r\n    if (string.length < 2) string = \"0\" + string;\r\n    return string;\r\n}\r\n\r\n//hexadecimal form of colors\r\nfunction color(red, green, blue) {\r\n    return \"#\" + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue);\r\n}\r\n\r\n//how much lightening?\r\nfunction lighting(string) {\r\n    var howManyStars = string.match(/[*]/g).length;\r\n    return (howManyStars * 1) / 10;\r\n}\r\n\r\n//getting lightness of the color\r\nfunction shade(col, light) {\r\n    var r = parseInt(col.substr(1, 2), 16);\r\n    var g = parseInt(col.substr(3, 2), 16);\r\n    var b = parseInt(col.substr(5, 2), 16);\r\n    if (light < 0) {\r\n        r = (1 + light) * r;\r\n        g = (1 + light) * g;\r\n        b = (1 + light) * b;\r\n    } else {\r\n        r = (1 - light) * r + light * 255;\r\n        g = (1 - light) * g + light * 255;\r\n        b = (1 - light) * b + light * 255;\r\n    }\r\n    return color(r, g, b);\r\n}\r\n\r\n\r\n\r\n//plsWork(skills);\r\n\r\n//console.log(\"Rika\");\r\n//console.log(shade(baseColor, 0.2));\r\n//console.log(plantUMLing(result));\r\n","import React from 'react';\nimport plantumlEncoder from 'plantuml-encoder'\nimport './App.css';\nimport {\n  plsWork\n} from './rikaskill.js'\nimport skills from './skills.json'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const UMLVersion = plsWork(skills)\n    this.state = { jsonToUML: skills, UMLVersion, url: this.createURL(UMLVersion), };\n  }\n  createURL = (UMLVersion) => {\n    var encoded = plantumlEncoder.encode(UMLVersion)\n    var url = 'http://www.plantuml.com/plantuml/img/' + encoded\n    return url\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault()\n    const value = JSON.parse(event.target[0].value)\n    const UMLVersion = plsWork(value)\n\n    this.setState({\n      jsonToUML: value,\n      UMLVersion,\n      url: this.createURL(UMLVersion)\n    })\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\" >\n        <br />\n        <div><form onSubmit={e => this.onSubmit(e)}><input type=\"text\"></input><button type=\"submit\">Submit</button></form></div><br />\n        <div><img alt=\"\" src={this.state.url}></img></div>\n        <pre>{JSON.stringify(this.state.jsonToUML)}</pre>\n        <pre>{`${this.state.UMLVersion}`}</pre>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}