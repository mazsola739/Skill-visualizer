{"version":3,"sources":["rikaskill.js","App.jsx","reportWebVitals.js","index.js"],"names":["plsWork","QQ","result","getFormatted","plantUMLing","getVisualizedToSite","object","prefix","Object","entries","forEach","index","key","value","length","unBoxing","string","split","map","el","test","hasNumber","replace","join","coloring","includes","lightness","lighting","shade","rgbToHex","color","Math","round","toString","match","col","light","green","blue","r","parseInt","substr","g","b","createURL","UMLVersion","plantumlEncoder","encode","App","props","useState","skills","jsonToUML","setJsonToUML","showTheJson","setShowTheJson","umlVersion","setUmlVersion","url","setUrl","className","onSubmit","e","event","preventDefault","JSON","parse","target","type","alt","src","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58dfb71b.chunk.js","sourcesContent":["//todo optimalization\r\n\r\nvar baseColor = \"#00abf5\";\r\n\r\nexport function plsWork(QQ) {\r\n    var result = getFormatted(QQ, \"\");\r\n    return plantUMLing(result);\r\n}\r\n\r\nexport function showToMe(QQ) {\r\n    var result = getVisualizedToSite(QQ, \"\");\r\n    return result;\r\n}\r\n\r\nconst isLeaf = function (x) {\r\n    return typeof x === \"string\"\r\n}\r\n\r\nconst isNode = function (x) {\r\n    return typeof x === \"object\"\r\n}\r\n\r\nconst getVisualizedToSite = function (object, prefix) {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"└─ \" : \"├─ \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getVisualizedToSite(value, prefix + (index + 1 === length ? \"   \" : \"│  \"));\r\n        } else {\r\n            if (value) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n//creating the data's into the shape of needing to plantUML\r\n//todo isleaf isnode\r\n\r\nconst getFormatted = function (object, prefix) {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"* \" : \"* \") + key;\r\n        if (value && typeof value === \"object\") {\r\n            result += \"\\n\";\r\n            result += getFormatted(value, prefix + (index + 1 === length ? \"*\" : \"*\"));\r\n        } else {\r\n            if (value || value === 0) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return unBoxing(result);\r\n}\r\n//does the children got number?\r\nconst hasNumber = function (string) {\r\n    return /\\d/.test(string);\r\n}\r\n//leafs \"unboxing\"\r\nconst unBoxing = function (string) {\r\n    return string\r\n        .split(\"\\n\")\r\n        .map((el) => (hasNumber(el) ? el.replace(\"* \", \"*_ \") : el))\r\n        .join(\"\\n\");\r\n}\r\n//adding plantUML settings\r\nconst plantUMLing = function (string) {\r\n    string = string.split(\"\\n\");\r\n    string = coloring(string);\r\n    string[0] = \"@startmindmap\\n!theme spacelab\\ntitle Rika's Skill-visualizer\\n\\n\" + string[0];\r\n    string[string.length - 1] = \"\\nlegend right\\n  Rika©\\nendlegend\\n@endmindmap\";\r\n    return string.join(\"\\n\");\r\n}\r\n\r\n//adding color to the boxes\r\nconst coloring = function (string) {\r\n    return string.map((el) => {\r\n        if (!el.includes(\"_\") && el.length > 0) {\r\n            var lightness = lighting(el)\r\n            return el.replace(\"* \", `*[${shade(baseColor, lightness)}] `)\r\n        } else {\r\n            return el\r\n        }\r\n    });\r\n}\r\n\r\n//converting colors to hexadecimal\r\nconst rgbToHex = function (color) {\r\n    color = Math.round(color);\r\n    if (color < 0) color = 0;\r\n    if (color > 255) color = 255;\r\n    var string = color.toString(16);\r\n    if (string.length < 2) string = \"0\" + string;\r\n    return string;\r\n}\r\n\r\n//hexadecimal form of colors\r\nconst color = function (red, green, blue) {\r\n    return \"#\" + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue);\r\n}\r\n\r\n//how much lightening?\r\nconst lighting = function (string) {\r\n    var howManyStars = string.match(/[*]/g).length;\r\n    return howManyStars / 10;\r\n}\r\n\r\n//getting lightness of the color\r\nconst shade = function (col, light) {\r\n    var r = parseInt(col.substr(1, 2), 16);\r\n    var g = parseInt(col.substr(3, 2), 16);\r\n    var b = parseInt(col.substr(5, 2), 16);\r\n    if (light < 0) {\r\n        r = (1 + light) * r;\r\n        g = (1 + light) * g;\r\n        b = (1 + light) * b;\r\n    } else {\r\n        r = (1 - light) * r + light * 255;\r\n        g = (1 - light) * g + light * 255;\r\n        b = (1 - light) * b + light * 255;\r\n    }\r\n    return color(r, g, b);\r\n}\r\n","import React, { useState } from 'react';\r\nimport plantumlEncoder from 'plantuml-encoder'\r\nimport './App.css';\r\nimport {\r\n  showToMe\r\n} from './rikaskill.js'\r\nimport {\r\n  plsWork\r\n} from './rikaskill.js'\r\nimport skills from './skills.json'\r\n\r\nconst createURL = (UMLVersion) => {\r\n  var encoded = plantumlEncoder.encode(UMLVersion)\r\n  var url = 'http://www.plantuml.com/plantuml/img/' + encoded\r\n  return url\r\n}\r\n\r\nconst App = (props) => {\r\n\r\n  const [jsonToUML, setJsonToUML] = useState(skills)\r\n  const [showTheJson, setShowTheJson] = useState(showToMe(skills))\r\n  const [umlVersion, setUmlVersion] = useState(plsWork(skills))\r\n  const [url, setUrl] = useState(createURL(plsWork(skills)))\r\n\r\n  //todo szerkeszteni\r\n  const onSubmit = (event) => {\r\n    event.preventDefault()\r\n    const value = JSON.parse(event.target[0].value)\r\n    const umlVersion = plsWork(value)\r\n\r\n    setJsonToUML(value)\r\n    setShowTheJson(value)\r\n    setUmlVersion(umlVersion)\r\n    setUrl(createURL(umlVersion))\r\n  }\r\n\r\n  //console.log(this.state)\r\n  return (\r\n    <div className=\"App\" >\r\n      <br />\r\n      <div><form onSubmit={e => onSubmit(e)}><input type=\"text\"></input><button type=\"submit\">Submit</button></form></div><br />\r\n      <div><img alt=\"\" src={url}></img></div>\r\n      {/* debug todo blueprint marci dobta a linket diszkordon https://blueprintjs.com/docs/#core/components/collapse --save*/}\r\n      <pre>{JSON.stringify(jsonToUML)}</pre>\r\n      <pre>{`${showTheJson}`}</pre>\r\n      <pre>{`${umlVersion}`}</pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}