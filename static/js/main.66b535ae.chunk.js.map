{"version":3,"sources":["rikaskill.js","App.jsx","reportWebVitals.js","index.js"],"names":["showToMeInPic","json","givingPlantUmlSetting","getFormattedToUml","showToMeOnSite","getVisualizedToSite","object","prefix","result","Object","entries","forEach","index","key","value","length","isNode","unBoxing","string","split","map","el","test","hasNumber","replace","join","coloringTheBox","includes","lightness","lightingWithDepth","shadeOfColor","rgbToHex","color","Math","round","toString","match","light","red","parseInt","substr","green","blue","colorHexForm","createUrl","umlVersion","plantumlEncoder","encode","App","props","useState","skills","jsonToUml","setJsonToUml","showTheJson","setShowTheJson","setUmlVersion","imgUrl","setImgUrl","className","onSubmit","e","event","preventDefault","JSON","parse","target","type","alt","src","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEO,SAASA,EAAcC,GAC1B,OAAOC,EAAsBC,EAAkBF,EAAM,KAElD,SAASG,EAAeH,GAC3B,OAAOI,EAAoBJ,EAAM,IAGrC,IAAME,EAAoB,SAApBA,EAAqBG,EAAQC,GAC/B,IAAIC,EAAS,GAWb,OAVAC,OAAOC,QAAQJ,GAAQK,SAAQ,WAAeC,EAAf,GAAsC,IAAD,mBAAnCC,EAAmC,KAA9BC,EAA8B,OAAbC,OACnDP,GAAUD,EAAiC,KAAeM,EACtDC,GAASE,EAAOF,IAChBN,GAAU,KACVA,GAAUL,EAAkBW,EAAOP,EAAiC,QAEhEO,GAAmB,IAAVA,KAAaN,GAAU,KAAOM,GAC3CN,GAAU,SAGXS,EAAST,IAGdH,EAAsB,SAAtBA,EAAuBC,EAAQC,GACjC,IAAIC,EAAS,GAWb,OAVAC,OAAOC,QAAQJ,GAAQK,SAAQ,WAAeC,EAAf,GAAsC,IAAD,mBAAnCC,EAAmC,KAA9BC,EAA8B,KAAbC,EAAa,EAAbA,OACnDP,GAAUD,GAAUK,EAAQ,IAAMG,EAAS,gBAAQ,iBAASF,EACxDC,GAASE,EAAOF,IAChBN,GAAU,KACVA,GAAUH,EAAoBS,EAAOP,GAAUK,EAAQ,IAAMG,EAAS,MAAQ,eAE1ED,IAAON,GAAU,KAAOM,GAC5BN,GAAU,SAGXA,GAOLQ,EAAS,SAACF,GACZ,MAAwB,kBAAVA,GAMZG,EAAW,SAACC,GACd,OAAOA,EACFC,MAAM,MACNC,KAAI,SAACC,GAAD,OAPK,SAACH,GACf,MAAO,KAAKI,KAAKJ,GAMCK,CAAUF,IAZJ,kBAYkBA,EAAMA,EAAGG,QAAQ,KAAM,OAASH,KACrEI,KAAK,OAERvB,EAAwB,SAACgB,GAK3B,OAJAA,EAASA,EAAOC,MAAM,OACtBD,EAASQ,EAAeR,IACjB,GAAK,oEAAsEA,EAAO,GACzFA,EAAOA,EAAOH,OAAS,GAAK,qDACrBG,EAAOO,KAAK,OAIjBC,EAAiB,SAACR,GACpB,OAAOA,EAAOE,KAAI,SAACC,GACf,IAAKA,EAAGM,SAAS,MAAQN,EAAGN,OAAS,EAAG,CACpC,IAAIa,EAAYC,EAAkBR,GAClC,OAAOA,EAAGG,QAAQ,KAAX,YAAsBM,EArEzB,UAqEiDF,GAA9C,OAEP,OAAOP,MAIbU,EAAW,SAACC,IACdA,EAAQC,KAAKC,MAAMF,IACP,IAAGA,EAAQ,GACnBA,EAAQ,MAAKA,EAAQ,KACzB,IAAId,EAASc,EAAMG,SAAS,IAE5B,OADIjB,EAAOH,OAAS,IAAGG,EAAS,IAAMA,GAC/BA,GAKLW,EAAoB,SAACX,GAEvB,OADmBA,EAAOkB,MAAM,QAAQrB,OAClB,IAEpBe,EAAe,SAACE,EAAOK,GACzB,IAAIC,EAAMC,SAASP,EAAMQ,OAAO,EAAG,GAAI,IACnCC,EAAQF,SAASP,EAAMQ,OAAO,EAAG,GAAI,IACrCE,EAAOH,SAASP,EAAMQ,OAAO,EAAG,GAAI,IAUxC,OATIH,EAAQ,GACRC,GAAO,EAAID,EACXI,GAAS,EAAIJ,EACbK,GAAQ,EAAIL,IAEZC,GAAO,EAAID,GAASC,EAAc,IAARD,EAC1BI,GAAS,EAAIJ,GAASI,EAAgB,IAARJ,EAC9BK,GAAQ,EAAIL,GAASK,EAAe,IAARL,GAlBf,SAACC,EAAKG,EAAOC,GAC9B,MAAO,IAAMX,EAASO,GAAOP,EAASU,GAASV,EAASW,GAmBjDC,CAAaL,EAAKG,EAAOC,I,cC5F9BE,EAAY,SAACC,GAGjB,MADa,wCADCC,IAAgBC,OAAOF,IAsCxBG,EAjCH,SAACC,GAEX,MAAkCC,mBAASC,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,mBAAS9C,EAAe+C,IAA9D,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCL,mBAASlD,EAAcmD,IAA3D,mBAAON,EAAP,KAAmBW,EAAnB,KACA,EAA4BN,mBAASN,EAAU5C,EAAcmD,KAA7D,mBAAOM,EAAP,KAAeC,EAAf,KAeA,OACE,sBAAKC,UAAU,MAAf,UACE,uBACA,8BAAK,uBAAMC,SAAU,SAAAC,GAAC,OAfT,SAACC,GAChBA,EAAMC,iBACN,IAAMjD,EAAQkD,KAAKC,MAAMH,EAAMI,OAAO,GAAGpD,OACnCwC,EAAclD,EAAeU,GAC7B+B,EAAa7C,EAAcc,GAEjCuC,EAAavC,GACbyC,EAAeD,GACfE,EAAcX,GACda,EAAUd,EAAUC,IAMQe,CAASC,IAA9B,UAAkC,uBAAOM,KAAK,SAAe,wBAAQA,KAAK,SAAb,yBAAkD,uBACpH,8BAAK,qBAAKC,IAAI,GAAGC,IAAKZ,MAEtB,8BAAMO,KAAKM,UAAUlB,KACrB,wCAASE,KACT,wCAAST,SCjCA0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.66b535ae.chunk.js","sourcesContent":["var baseColor = \"#00abf5\";\r\n\r\nexport function showToMeInPic(json) {\r\n    return givingPlantUmlSetting(getFormattedToUml(json, \"\"));\r\n}\r\nexport function showToMeOnSite(json) {\r\n    return getVisualizedToSite(json, \"\");\r\n}\r\n\r\nconst getFormattedToUml = (object, prefix) => {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"* \" : \"* \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getFormattedToUml(value, prefix + (index + 1 === length ? \"*\" : \"*\"));\r\n        } else {\r\n            if (value || value === 0) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return unBoxing(result);\r\n}\r\n\r\nconst getVisualizedToSite = (object, prefix) => {\r\n    var result = \"\";\r\n    Object.entries(object).forEach(([key, value], index, { length }) => {\r\n        result += prefix + (index + 1 === length ? \"└─ \" : \"├─ \") + key;\r\n        if (value && isNode(value)) {\r\n            result += \"\\n\";\r\n            result += getVisualizedToSite(value, prefix + (index + 1 === length ? \"   \" : \"│  \"));\r\n        } else {\r\n            if (value) result += \": \" + value;\r\n            result += \"\\n\";\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n\r\nconst isLeaf = (value) => {\r\n    return typeof value === \"string\"\r\n}\r\nconst isNode = (value) => {\r\n    return typeof value === \"object\"\r\n}\r\nconst hasNumber = (string) => {\r\n    return /\\d/.test(string);\r\n}\r\n\r\nconst unBoxing = (string) => {\r\n    return string\r\n        .split(\"\\n\")\r\n        .map((el) => (hasNumber(el) && isLeaf(el) ? el.replace(\"* \", \"*_ \") : el))\r\n        .join(\"\\n\");\r\n}\r\nconst givingPlantUmlSetting = (string) => {\r\n    string = string.split(\"\\n\");\r\n    string = coloringTheBox(string);\r\n    string[0] = \"@startmindmap\\n!theme spacelab\\ntitle Rika's Skill-visualizer\\n\\n\" + string[0];\r\n    string[string.length - 1] = \"\\nlegend right\\n  Rika©\\nendlegend\\n@endmindmap\";\r\n    return string.join(\"\\n\");\r\n}\r\n\r\n\r\nconst coloringTheBox = (string) => {\r\n    return string.map((el) => {\r\n        if (!el.includes(\"_\") && el.length > 0) {\r\n            var lightness = lightingWithDepth(el)\r\n            return el.replace(\"* \", `*[${shadeOfColor(baseColor, lightness)}] `)\r\n        } else {\r\n            return el\r\n        }\r\n    });\r\n}\r\nconst rgbToHex = (color) => {\r\n    color = Math.round(color);\r\n    if (color < 0) color = 0;\r\n    if (color > 255) color = 255;\r\n    var string = color.toString(16);\r\n    if (string.length < 2) string = \"0\" + string;\r\n    return string;\r\n}\r\nconst colorHexForm = (red, green, blue) => {\r\n    return \"#\" + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue);\r\n}\r\nconst lightingWithDepth = (string) => {\r\n    var howManyStars = string.match(/[*]/g).length;\r\n    return howManyStars / 10;\r\n}\r\nconst shadeOfColor = (color, light) => {\r\n    var red = parseInt(color.substr(1, 2), 16);\r\n    var green = parseInt(color.substr(3, 2), 16);\r\n    var blue = parseInt(color.substr(5, 2), 16);\r\n    if (light < 0) {\r\n        red = (1 + light) * red;\r\n        green = (1 + light) * green;\r\n        blue = (1 + light) * blue;\r\n    } else {\r\n        red = (1 - light) * red + light * 255;\r\n        green = (1 - light) * green + light * 255;\r\n        blue = (1 - light) * blue + light * 255;\r\n    }\r\n    return colorHexForm(red, green, blue);\r\n}\r\n","import React, { useState } from 'react';\r\nimport plantumlEncoder from 'plantuml-encoder'\r\nimport './App.css';\r\nimport {\r\n  showToMeOnSite\r\n} from './rikaskill.js'\r\nimport {\r\n  showToMeInPic\r\n} from './rikaskill.js'\r\nimport skills from './skills.json'\r\n\r\nconst createUrl = (umlVersion) => {\r\n  var encoded = plantumlEncoder.encode(umlVersion)\r\n  var imgUrl = 'http://www.plantuml.com/plantuml/img/' + encoded\r\n  return imgUrl\r\n}\r\n\r\nconst App = (props) => {\r\n\r\n  const [jsonToUml, setJsonToUml] = useState(skills)\r\n  const [showTheJson, setShowTheJson] = useState(showToMeOnSite(skills))\r\n  const [umlVersion, setUmlVersion] = useState(showToMeInPic(skills))\r\n  const [imgUrl, setImgUrl] = useState(createUrl(showToMeInPic(skills)))\r\n\r\n  //todo szerkeszteni\r\n  const onSubmit = (event) => {\r\n    event.preventDefault()\r\n    const value = JSON.parse(event.target[0].value)\r\n    const showTheJson = showToMeOnSite(value)\r\n    const umlVersion = showToMeInPic(value)\r\n\r\n    setJsonToUml(value)\r\n    setShowTheJson(showTheJson)\r\n    setUmlVersion(umlVersion)\r\n    setImgUrl(createUrl(umlVersion))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <br />\r\n      <div><form onSubmit={e => onSubmit(e)}><input type=\"text\"></input><button type=\"submit\">Submit</button></form></div><br />\r\n      <div><img alt=\"\" src={imgUrl}></img></div>\r\n      {/* debug todo blueprint marci dobta a linket diszkordon https://blueprintjs.com/docs/#core/components/collapse --save*/}\r\n      <pre>{JSON.stringify(jsonToUml)}</pre>\r\n      <pre>{`${showTheJson}`}</pre>\r\n      <pre>{`${umlVersion}`}</pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}